AWSTemplateFormatVersion: '2010-09-09'
Description: 'FindMyLunch Application - Consolidated Networking Infrastructure (us-east-1)'

Parameters:
  EnvironmentName:
    Description: Environment name (qa or prod)
    Type: String
    Default: qa
    AllowedValues:
      - qa
      - prod
    ConstraintDescription: must be either qa or prod
    
  DomainName:
    Description: Main domain name for the application (e.g., findmylunch.com)
    Type: String
    Default: findmylunch.net

  SubDomainPrefix:
    Description: Subdomain prefix for non-production environments (e.g., qa)
    Type: String
    Default: qa
    
  CreatePrivateHostedZones:
    Description: Whether to create private hosted zones (true for non-production, false for production)
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet 1
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for Public Subnet 2
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet 1
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for Private Subnet 2
    Type: String
    Default: 10.0.3.0/24

Conditions:
  IsProduction: !Equals [!Ref EnvironmentName, "prod"]


Resources:
  # Route 53 Hosted Zones
  MainHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub "Main hosted zone for ${DomainName} (${EnvironmentName} environment)"
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-hosted-zone"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  ApiHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub "api.${DomainName}"
      HostedZoneConfig:
        Comment: !Sub "API hosted zone for api.${DomainName} (${EnvironmentName} environment)"
      Tags:
        - Key: Name
          Value: !Sub "api.${DomainName}-hosted-zone"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # ACM Certificate for main domain and wildcard subdomains
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        !If
          - IsProduction
          - [ !Sub "www.${DomainName}" ]  # Include www subdomain for production as a list
          - [ !Sub "*.${DomainName}" ]  # Wildcard for non-production as a list
      ValidationMethod: DNS
      DomainValidationOptions: !If
        - IsProduction
        - - DomainName: !Ref DomainName
            HostedZoneId: !Ref MainHostedZone
          - DomainName: !Sub "www.${DomainName}"
            HostedZoneId: !Ref MainHostedZone
        - - DomainName: !Ref DomainName
            HostedZoneId: !Ref MainHostedZone
          - DomainName: !Sub "*.${DomainName}"
            HostedZoneId: !Ref MainHostedZone
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-certificate"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # API Gateway Certificate (us-east-1 specific for API Gateway custom domains)
  ApiGatewayCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "api.${DomainName}"
      SubjectAlternativeNames: !If
        - IsProduction
        - []  # Empty list for production, no additional SANs needed
        - !Sub "api.${SubDomainPrefix}.${DomainName}"  # Only add subdomain SAN for non-production
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub "api.${DomainName}-certificate"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-vpc
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-igw
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-public-subnet-1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch
        - Key: Type
          Value: Public

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-public-subnet-2
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch
        - Key: Type
          Value: Public

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-private-subnet-1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch
        - Key: Type
          Value: Private

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-private-subnet-2
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch
        - Key: Type
          Value: Private

  # NAT Gateway Elastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-nat-eip
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-nat-gateway
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-public-routes
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch
        - Key: Type
          Value: Public

  # Default Public Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public Subnet 1 Route Table Association
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Public Subnet 2 Route Table Association
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-private-routes
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch
        - Key: Type
          Value: Private

  # Default Private Route
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Private Subnet 1 Route Table Association
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  # Private Subnet 2 Route Table Association
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from anywhere
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-alb-sg
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow HTTP from ALB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow HTTPS from ALB
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-ec2-sg
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: Allow PostgreSQL from EC2 instances
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-findmylunch-rds-sg
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

  # API Gateway Custom Domain
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If
        - IsProduction
        - !Sub "api.${DomainName}"
        - !Sub "api.${SubDomainPrefix}.${DomainName}"
      CertificateArn: !Ref ApiGatewayCertificate
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2
      Tags:
        - Key: Name
          Value: !If
            - IsProduction
            - !Sub "api.${DomainName}"
            - !Sub "api.${SubDomainPrefix}.${DomainName}"
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: FindMyLunch

Outputs:
  # Route53 and ACM Outputs
  MainHostedZoneId:
    Description: Main Route53 Hosted Zone ID
    Value: !Ref MainHostedZone
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-MainHostedZoneId
      
  ApiHostedZoneId:
    Description: API Route53 Hosted Zone ID
    Value: !Ref ApiHostedZone
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-ApiHostedZoneId

  CertificateArn:
    Description: ACM Certificate ARN for CloudFront
    Value: !Ref Certificate
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-CertificateArn

  ApiGatewayCertificateArn:
    Description: ACM Certificate ARN for API Gateway
    Value: !Ref ApiGatewayCertificate
    Export:
      Name: !Sub "${EnvironmentName}-FindMyLunch-ApiGatewayCertificateArn"

  ApiGatewayDomainNameOutput:
    Description: API Gateway custom domain name
    Value: !Ref ApiGatewayDomainName
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-ApiGatewayDomainName

  DomainNameOutput:
    Description: Domain name
    Value: !Ref DomainName
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-DomainName

  # VPC Outputs
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-VPC

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-PrivateSubnet2

  ALBSecurityGroup:
    Description: Security Group ID for Application Load Balancer
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-ALBSecurityGroup

  EC2SecurityGroup:
    Description: Security Group ID for EC2 instances
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-EC2SecurityGroup

  RDSSecurityGroup:
    Description: Security Group ID for RDS instances
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-RDSSecurityGroup

  PublicSubnets:
    Description: List of Public Subnet IDs
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-PublicSubnets

  PrivateSubnets:
    Description: List of Private Subnet IDs
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-PrivateSubnets

  VpcCidr:
    Description: VPC CIDR Block
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub ${EnvironmentName}-FindMyLunch-VpcCidr

