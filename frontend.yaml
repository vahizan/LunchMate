AWSTemplateFormatVersion: '2010-09-09'
Description: 'LunchMate Application - Frontend Infrastructure (Nested Stack)'

Parameters:
  EnvironmentName:
    Description: Environment name (qa or prod)
    Type: String
    Default: qa
    AllowedValues:
      - qa
      - prod
    ConstraintDescription: must be either qa or prod

  DomainName:
    Description: Main domain name for the application (e.g., whatsforlunch.to)
    Type: String
    Default: whatsforlunch.to

  SubDomainPrefix:
    Description: Subdomain prefix for non-production environments (e.g., qa)
    Type: String
    Default: qa
    
  CreateRoute53Records:
    Description: Whether to create Route53 records (set to false if domain is managed elsewhere)
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  HostedZoneId:
    Description: Route53 Hosted Zone ID for the domain
    Type: String
    Default: ''
    
  CertificateArn:
    Description: ARN of the ACM certificate for CloudFront
    Type: String
    Default: ''

Conditions:
  IsProduction: !Equals [!Ref EnvironmentName, 'prod']
  CreateDNSRecords: !Equals [!Ref CreateRoute53Records, 'true']
  IsImportedCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  IsImportedHostedZone: !Not [!Equals [!Ref HostedZoneId, '']]

Resources:
  # S3 Bucket for Website Hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !If
        - IsProduction
        - !Sub ${DomainName}-website
        - !Sub ${SubDomainPrefix}-${DomainName}-website
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !If 
            - IsProduction
            - !Sub ${EnvironmentName}-lunchmate-website-bucket
            - !Sub ${EnvironmentName}-lunchmate-website-bucket
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: LunchMate

  # CloudFront Origin Access Identity
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${EnvironmentName} LunchMate Website"

  # S3 Bucket Policy for CloudFront Access
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  # Use imported certificate from networking stack

  # CloudFront Cache Policy
  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${EnvironmentName}-LunchMate-CachePolicy"
        Comment: "Optimized cache policy for LunchMate frontend assets"
        DefaultTTL: 604800  # 7 days in seconds
        MaxTTL: 31536000    # 1 year in seconds
        MinTTL: 3600        # 1 hour in seconds
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If 
            - IsProduction
            - !Ref DomainName
            - !Sub "${SubDomainPrefix}.${DomainName}"
          - !If 
            - IsProduction
            - !Sub "www.${DomainName}"
            - !Ref AWS::NoValue
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        Enabled: true
        HttpVersion: http2and3
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: !Ref CloudFrontCachePolicy
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !If
            - IsProduction
            - !If
              - IsImportedCertificate
              - !Ref CertificateArn
              - Fn::ImportValue: !Sub "${EnvironmentName}-LunchMate-CertificateArn"
            - !If
              - IsImportedCertificate
              - !Ref CertificateArn
              - Fn::ImportValue: !Sub "${EnvironmentName}-LunchMate-CertificateArn"
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 3600  # Cache error responses for 1 hour
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 3600  # Cache error responses for 1 hour
        Tags:
          - Key: Name
            Value: !If 
              - IsProduction
              - !Sub "${DomainName}-distribution"
              - !Sub "${SubDomainPrefix}.${DomainName}-distribution"
          - Key: Environment
            Value: !Ref EnvironmentName
          - Key: Application
            Value: LunchMate

  # Route53 DNS Records
  WebsiteDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecords
    Properties:
      HostedZoneId: !If
        - IsImportedHostedZone
        - !Ref HostedZoneId
        - Fn::ImportValue: !Sub "${EnvironmentName}-LunchMate-HostedZoneId"
      Name: !If 
        - IsProduction
        - !Ref DomainName
        - !Sub "${SubDomainPrefix}.${DomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (constant)
        EvaluateTargetHealth: false

  # WWW DNS Record (only for production)
  WWWDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: !And [CreateDNSRecords, IsProduction]
    Properties:
      HostedZoneId: !If
        - IsImportedHostedZone
        - !Ref HostedZoneId
        - Fn::ImportValue: !Sub "${EnvironmentName}-LunchMate-HostedZoneId"
      Name: !Sub "www.${DomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID (constant)
        EvaluateTargetHealth: false

Outputs:
  WebsiteBucketName:
    Description: Name of the S3 bucket for website hosting
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub "${EnvironmentName}-LunchMate-WebsiteBucketName"

  WebsiteBucketArn:
    Description: ARN of the S3 bucket for website hosting
    Value: !GetAtt WebsiteBucket.Arn
    Export:
      Name: !Sub "${EnvironmentName}-LunchMate-WebsiteBucketArn"

  CloudFrontDistributionId:
    Description: ID of the CloudFront distribution
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub "${EnvironmentName}-LunchMate-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${EnvironmentName}-LunchMate-CloudFrontDomainName"

  WebsiteURL:
    Description: URL of the website
    Value: !If 
      - IsProduction
      - !Sub "https://${DomainName}"
      - !Sub "https://${SubDomainPrefix}.${DomainName}"
    Export:
      Name: !Sub "${EnvironmentName}-LunchMate-WebsiteURL"

  CloudFrontOriginAccessIdentityId:
    Description: ID of the CloudFront Origin Access Identity
    Value: !Ref CloudFrontOriginAccessIdentity
    Export:
      Name: !Sub "${EnvironmentName}-LunchMate-CloudFrontOAIId"